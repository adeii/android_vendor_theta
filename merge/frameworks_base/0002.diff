From: ChepKun <ProgrammerKun@gmail.com>
Subject: frameworks/base (0002): fix ElectronBeam for legacy targets, use debug.electronbeam.legacy=1 in build.prop

diff --git a/services/java/com/android/server/power/ElectronBeam.java b/services/java/com/android/server/power/ElectronBeam.java
index 379e704..aa0a510 100644
--- a/services/java/com/android/server/power/ElectronBeam.java
+++ b/services/java/com/android/server/power/ElectronBeam.java
@@ -21,6 +21,7 @@ import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;

+import android.graphics.Bitmap;
 import android.graphics.PixelFormat;
 import android.graphics.SurfaceTexture;
 import android.opengl.EGL14;
@@ -30,7 +31,9 @@ import android.opengl.EGLDisplay;
 import android.opengl.EGLSurface;
 import android.opengl.GLES10;
 import android.opengl.GLES11Ext;
+import android.opengl.GLUtils;
 import android.os.Looper;
+import android.os.SystemProperties;
 import android.util.FloatMath;
 import android.util.Slog;
 import android.view.Display;
@@ -102,6 +105,12 @@ final class ElectronBeam {
     private final FloatBuffer mTexCoordBuffer = createNativeFloatBuffer(8);
 
     /**
+     * Fix for legacy targets
+     */
+    private String mLegacyMode;
+    private static final String LEGACY_MODE_PERSIST_PROP = "debug.electronbeam.legacy";
+
+    /**
      * Animates an electron beam warming up.
      */
     public static final int MODE_WARM_UP = 0;
@@ -116,9 +125,9 @@ final class ElectronBeam {
      */
     public static final int MODE_FADE = 2;
 
-
     public ElectronBeam(DisplayManagerService displayManager) {
         mDisplayManager = displayManager;
+        mLegacyMode = SystemProperties.get(LEGACY_MODE_PERSIST_PROP, "0");
     }
 
     /**
@@ -171,9 +180,16 @@ final class ElectronBeam {
             if (mMode == MODE_FADE) {
                 return true;
             }
+
+	if ("1".equals(mLegacyMode)) {
+            return createEglContext()
+                    && createEglSurface()
+                    && captureScreenshotTextureAndSetViewport_Legacy();
+	} else {
             return createEglContext()
                     && createEglSurface()
                     && captureScreenshotTextureAndSetViewport();
+	    }	
         }
         return false;
     }
@@ -266,46 +282,85 @@ final class ElectronBeam {
         GLES10.glVertexPointer(2, GLES10.GL_FLOAT, 0, mVertexBuffer);
         GLES10.glEnableClientState(GLES10.GL_VERTEX_ARRAY);
 
-        // set-up texturing
-        GLES10.glDisable(GLES10.GL_TEXTURE_2D);
-        GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
-
-        // bind texture and set blending for drawing planes
-        GLES10.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, mTexNames[0]);
-        GLES10.glTexEnvx(GLES10.GL_TEXTURE_ENV, GLES10.GL_TEXTURE_ENV_MODE,
-                mMode == MODE_WARM_UP ? GLES10.GL_MODULATE : GLES10.GL_REPLACE);
-        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
-                GLES10.GL_TEXTURE_MAG_FILTER, GLES10.GL_LINEAR);
-        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
-                GLES10.GL_TEXTURE_MIN_FILTER, GLES10.GL_LINEAR);
-        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
-                GLES10.GL_TEXTURE_WRAP_S, GLES10.GL_CLAMP_TO_EDGE);
-        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
-                GLES10.GL_TEXTURE_WRAP_T, GLES10.GL_CLAMP_TO_EDGE);
-        GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
-        GLES10.glTexCoordPointer(2, GLES10.GL_FLOAT, 0, mTexCoordBuffer);
-        GLES10.glEnableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);
-
-        // draw the red plane
-        setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ar);
-        GLES10.glColorMask(true, false, false, true);
-        GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
-
-        // draw the green plane
-        setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ag);
-        GLES10.glColorMask(false, true, false, true);
-        GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
-
-        // draw the blue plane
-        setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ab);
-        GLES10.glColorMask(false, false, true, true);
-        GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
-
-        // clean up after drawing planes
-        GLES10.glDisable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
+
+	if ("1".equals(mLegacyMode)){
+	        // bind texture and set blending for drawing planes
+	        GLES10.glBindTexture(GLES10.GL_TEXTURE_2D, mTexNames[0]);
+        	GLES10.glTexEnvx(GLES10.GL_TEXTURE_ENV, GLES10.GL_TEXTURE_ENV_MODE,
+        	        mMode == MODE_WARM_UP ? GLES10.GL_MODULATE : GLES10.GL_REPLACE);
+        	GLES10.glTexParameterx(GLES10.GL_TEXTURE_2D,
+        	        GLES10.GL_TEXTURE_MAG_FILTER, GLES10.GL_LINEAR);
+        	GLES10.glTexParameterx(GLES10.GL_TEXTURE_2D,
+        	        GLES10.GL_TEXTURE_MIN_FILTER, GLES10.GL_LINEAR);
+        	GLES10.glTexParameterx(GLES10.GL_TEXTURE_2D,
+        	        GLES10.GL_TEXTURE_WRAP_S, GLES10.GL_CLAMP_TO_EDGE);
+        	GLES10.glTexParameterx(GLES10.GL_TEXTURE_2D,
+        	        GLES10.GL_TEXTURE_WRAP_T, GLES10.GL_CLAMP_TO_EDGE);
+        	GLES10.glEnable(GLES10.GL_TEXTURE_2D);
+        	GLES10.glTexCoordPointer(2, GLES10.GL_FLOAT, 0, mTexCoordBuffer);
+        	GLES10.glEnableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);
+	
+        	// draw the red plane
+        	setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ar);
+        	GLES10.glColorMask(true, false, false, true);
+        	GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
+	
+        	// draw the green plane
+        	setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ag);
+        	GLES10.glColorMask(false, true, false, true);
+        	GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
+	
+        	// draw the blue plane
+        	setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ab);
+        	GLES10.glColorMask(false, false, true, true);
+        	GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
+	
+        	// clean up after drawing planes
+        	GLES10.glDisable(GLES10.GL_TEXTURE_2D);
+	} else {
+        	// set-up texturing
+        	GLES10.glDisable(GLES10.GL_TEXTURE_2D);
+        	GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
+
+	        // bind texture and set blending for drawing planes
+	        GLES10.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, mTexNames[0]);
+	        GLES10.glTexEnvx(GLES10.GL_TEXTURE_ENV, GLES10.GL_TEXTURE_ENV_MODE,
+	                mMode == MODE_WARM_UP ? GLES10.GL_MODULATE : GLES10.GL_REPLACE);
+	        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+	                GLES10.GL_TEXTURE_MAG_FILTER, GLES10.GL_LINEAR);
+	        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+	                GLES10.GL_TEXTURE_MIN_FILTER, GLES10.GL_LINEAR);
+	        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+	                GLES10.GL_TEXTURE_WRAP_S, GLES10.GL_CLAMP_TO_EDGE);
+	        GLES10.glTexParameterx(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,
+	                GLES10.GL_TEXTURE_WRAP_T, GLES10.GL_CLAMP_TO_EDGE);
+	        GLES10.glEnable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
+	        GLES10.glTexCoordPointer(2, GLES10.GL_FLOAT, 0, mTexCoordBuffer);
+	        GLES10.glEnableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);
+	
+	        // draw the red plane
+	        setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ar);
+	        GLES10.glColorMask(true, false, false, true);
+	        GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
+	
+	        // draw the green plane
+	        setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ag);
+	        GLES10.glColorMask(false, true, false, true);
+	        GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
+	
+	        // draw the blue plane
+	        setVStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ab);
+	        GLES10.glColorMask(false, false, true, true);
+	        GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
+	
+	        // clean up after drawing planes
+	        GLES10.glDisable(GLES11Ext.GL_TEXTURE_EXTERNAL_OES);
+} // Legacy mode
+
         GLES10.glDisableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);
         GLES10.glColorMask(true, true, true, true);
 
+
         // draw the white highlight (we use the last vertices)
         if (mMode == MODE_COOL_DOWN) {
             GLES10.glColor4f(ag, ag, ag, 1.0f);
@@ -319,10 +374,10 @@ final class ElectronBeam {
 
     /**
      * Draws a frame where the electron beam has been stretched out into
-     * a thin white horizontal line that fades as it expands outwards.
+     * a thin white horizontal line that fades as it collapses inwards.
      *
-     * @param stretch The stretch factor.  0.0 is no stretch / no fade,
-     * 1.0 is maximum stretch / maximum fade.
+     @param stretch The stretch factor.  0.0 is maximum stretch / no fade,
+     * 1.0 is collapsed / maximum fade.
      */
     private void drawHStretch(float stretch) {
         // compute interpolation scale factor
@@ -338,7 +393,7 @@ final class ElectronBeam {
 
             // draw narrow fading white line
             setHStretchQuad(mVertexBuffer, mDisplayWidth, mDisplayHeight, ag);
-            GLES10.glColor4f(1.0f - ag, 1.0f - ag, 1.0f - ag, 1.0f);
+            GLES10.glColor4f(1.0f - ag*0.75f, 1.0f - ag*0.75f, 1.0f - ag*0.75f, 1.0f);
             GLES10.glDrawArrays(GLES10.GL_TRIANGLE_FAN, 0, 4);
 
             // clean up
@@ -355,7 +410,7 @@ final class ElectronBeam {
     }
 
     private static void setHStretchQuad(FloatBuffer vtx, float dw, float dh, float a) {
-        final float w = dw + (dw * a);
+        final float w = 2 * dw * (1.0f - a);
         final float h = 1.0f;
         final float x = (dw - w) * 0.5f;
         final float y = (dh - h) * 0.5f;
@@ -376,6 +431,91 @@ final class ElectronBeam {
         vtx.put(7, y);
     }
 
+ private static int nextPowerOfTwo(int value) {
+        return 1 << (32 - Integer.numberOfLeadingZeros(value));
+    }
+
+private boolean captureScreenshotTextureAndSetViewport_Legacy() {
+      Bitmap bitmap = SurfaceControl.screenshot(mDisplayWidth, mDisplayHeight,
+                0, ELECTRON_BEAM_LAYER - 1);
+        if (bitmap == null) {
+            Slog.e(TAG, "Could not take a screenshot!");
+            return false;
+        }
+
+ 	try {
+        	if (!attachEglContext()) {
+            		return false;
+        	}
+        
+		try {
+            		if (!mTexNamesGenerated) {
+                		GLES10.glGenTextures(1, mTexNames, 0);
+                		if (checkGlErrors("glGenTextures")) {
+                    			return false;
+                		}
+                		mTexNamesGenerated = true;
+            		}
+
+                	GLES10.glBindTexture(GLES10.GL_TEXTURE_2D, mTexNames[0]);
+                	if (checkGlErrors("glBindTexture")) {
+	                    return false;
+        	        }
+
+        	        float u = 1.0f;
+        	        float v = 1.0f;
+        	        GLUtils.texImage2D(GLES10.GL_TEXTURE_2D, 0, bitmap, 0);
+        	        if (checkGlErrors("glTexImage2D, first try", false)) {
+        	            // Try a power of two size texture instead.
+        	            int tw = nextPowerOfTwo(mDisplayWidth);
+        	            int th = nextPowerOfTwo(mDisplayHeight);
+        	            int format = GLUtils.getInternalFormat(bitmap);
+        	            GLES10.glTexImage2D(GLES10.GL_TEXTURE_2D, 0,
+        	                    format, tw, th, 0,
+        	                    format, GLES10.GL_UNSIGNED_BYTE, null);
+        	            if (checkGlErrors("glTexImage2D, second try")) {
+        	                return false;
+        	            }
+	
+        	            GLUtils.texSubImage2D(GLES10.GL_TEXTURE_2D, 0, 0, 0, bitmap);
+        	            if (checkGlErrors("glTexSubImage2D")) {
+        	                return false;
+        	            }
+	
+        	            u = (float)mDisplayWidth / tw;
+        	           v = (float)mDisplayHeight / th;
+        	        }
+	
+        	        // Set up texture coordinates for a quad.
+        	        // We might need to change this if the texture ends up being
+        	        // a different size from the display for some reason.
+        	        mTexCoordBuffer.put(0, 0f);
+        	        mTexCoordBuffer.put(1, v);
+        	        mTexCoordBuffer.put(2, 0f);
+        	        mTexCoordBuffer.put(3, 0f);
+        	        mTexCoordBuffer.put(4, u);
+        	        mTexCoordBuffer.put(5, 0f);
+        	        mTexCoordBuffer.put(6, u);
+        	        mTexCoordBuffer.put(7, v);
+	
+        	        // Set up our viewport.
+        	        GLES10.glViewport(0, 0, mDisplayWidth, mDisplayHeight);
+        	        GLES10.glMatrixMode(GLES10.GL_PROJECTION);
+        	        GLES10.glLoadIdentity();
+        	        GLES10.glOrthof(0, mDisplayWidth, 0, mDisplayHeight, 0, 1);
+        	        GLES10.glMatrixMode(GLES10.GL_MODELVIEW);
+        	        GLES10.glLoadIdentity();
+        	        GLES10.glMatrixMode(GLES10.GL_TEXTURE);
+        	        GLES10.glLoadIdentity();
+        	} finally {
+        		detachEglContext();
+        	}
+        } finally {
+		bitmap.recycle();
+        }
+        return true;
+    }
+
     private boolean captureScreenshotTextureAndSetViewport() {
         if (!attachEglContext()) {
             return false;
