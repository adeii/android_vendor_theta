From: ChepKun <ProgrammerKun@gmail.com>
Subject: frameworks/base (0013): new battery indicators

diff --git a/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java b/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
index d0fda97..a50823a 100755
--- a/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
+++ b/packages/SystemUI/src/com/android/systemui/BatteryMeterView.java
@@ -47,7 +47,9 @@ public class BatteryMeterView extends View implements DemoMode {
     public static enum BatteryMeterMode {
         BATTERY_METER_GONE,
         BATTERY_METER_ICON_PORTRAIT,
+	BATTERY_METER_ICON_PORTRAIT_TEXT,
         BATTERY_METER_ICON_LANDSCAPE,
+        BATTERY_METER_ICON_LANDSCAPE_TEXT,
         BATTERY_METER_CIRCLE,
         BATTERY_METER_TEXT
     }
@@ -128,6 +130,7 @@ public class BatteryMeterView extends View implements DemoMode {
                         }
                         postDelayed(this, 200);
                     }
+
                 });
             }
         }
@@ -233,15 +236,22 @@ public class BatteryMeterView extends View implements DemoMode {
     protected BatteryMeterDrawable createBatteryMeterDrawable(BatteryMeterMode mode) {
         Resources res = mContext.getResources();
         switch (mode) {
+
+            case BATTERY_METER_ICON_PORTRAIT_TEXT:
+                return new NormalTextBatteryMeterDrawable(res, false);
+
+            case BATTERY_METER_ICON_LANDSCAPE:
+                return new NormalBatteryMeterDrawable(res, true);
+
+            case BATTERY_METER_ICON_LANDSCAPE_TEXT:
+                return new NormalTextBatteryMeterDrawable(res, true);
+
             case BATTERY_METER_CIRCLE:
                 return new CircleBatteryMeterDrawable(res);
 
             case BATTERY_METER_TEXT:
                 return new TextBatteryMeterDrawable(res);
 
-            case BATTERY_METER_ICON_LANDSCAPE:
-                return new NormalBatteryMeterDrawable(res, true);
-
             default:
                 return new NormalBatteryMeterDrawable(res, false);
         }
@@ -257,9 +267,13 @@ public class BatteryMeterView extends View implements DemoMode {
         } else if (mMeterMode == BatteryMeterMode.BATTERY_METER_TEXT) {
             width = (int)((TextBatteryMeterDrawable) mBatteryMeterDrawable).calculateMeasureWidth();
             onSizeChanged(width, height, 0, 0); // Force a size changed event
+        } else if (mMeterMode.compareTo(BatteryMeterMode.BATTERY_METER_ICON_PORTRAIT_TEXT) == 0) {
+            width = width + (int)((NormalTextBatteryMeterDrawable) mBatteryMeterDrawable).calculateMeasureWidth();
         } else if (mMeterMode.compareTo(BatteryMeterMode.BATTERY_METER_ICON_LANDSCAPE) == 0) {
             width = (int)(height * 1.2f);
-        }
+        } else if (mMeterMode.compareTo(BatteryMeterMode.BATTERY_METER_ICON_LANDSCAPE_TEXT) == 0) {
+            width = (int)(height * 1.2f) + (int)((NormalTextBatteryMeterDrawable) mBatteryMeterDrawable).calculateMeasureWidth();
+        } 
         setMeasuredDimension(width, height);
     }
 
@@ -321,7 +335,9 @@ public class BatteryMeterView extends View implements DemoMode {
                 mBatteryMeterDrawable = createBatteryMeterDrawable(mode);
             }
             if (mMeterMode == BatteryMeterMode.BATTERY_METER_ICON_PORTRAIT ||
-                    mMeterMode == BatteryMeterMode.BATTERY_METER_ICON_LANDSCAPE) {
+                    mMeterMode == BatteryMeterMode.BATTERY_METER_ICON_LANDSCAPE ||
+		    mMeterMode == BatteryMeterMode.BATTERY_METER_ICON_PORTRAIT_TEXT || 
+		    mMeterMode == BatteryMeterMode.BATTERY_METER_ICON_LANDSCAPE_TEXT) {
                 ((NormalBatteryMeterDrawable)mBatteryMeterDrawable).loadBoltPoints(
                         mContext.getResources());
             }
@@ -436,11 +452,8 @@ public class BatteryMeterView extends View implements DemoMode {
             mBoltPoints = loadBoltPoints(res);
         }
 
-        @Override
-        public void onDraw(Canvas c, BatteryTracker tracker) {
-            if (mDisposed) return;
-
-            final int level = tracker.level;
+	public void batteryDraw(Canvas c, BatteryTracker tracker, int pX){
+	    final int level = tracker.level;
 
             if (level == BatteryTracker.UNKNOWN_LEVEL) return;
 
@@ -452,15 +465,15 @@ public class BatteryMeterView extends View implements DemoMode {
             int height = mHeight - pt - pb;
             int width = mWidth - pl - pr;
 
-            mButtonHeight = (int) ((mHorizontal ? width : height) * 0.12f);
+            mButtonHeight = (int) ((mHorizontal ? width - pX : height) * 0.12f);
 
-            mFrame.set(0, 0, width, height);
+            mFrame.set(pX, 0, width, height);
             mFrame.offset(pl, pt);
 
             if (mHorizontal) {
                 mButtonFrame.set(
                         /*cover frame border of intersecting area*/
-                        width - (mButtonHeight + 5) - mFrame.left,
+                        width - (mButtonHeight + 5) - mFrame.left + pX,
                         mFrame.top + height * 0.25f,
                         mFrame.right,
                         mFrame.bottom - height * 0.25f);
@@ -470,9 +483,9 @@ public class BatteryMeterView extends View implements DemoMode {
                 mButtonFrame.right -= SUBPIXEL;
             } else {
                 mButtonFrame.set(
-                        mFrame.left + width * 0.25f,
+                        mFrame.left + (width -pX) * 0.25f,
                         mFrame.top,
-                        mFrame.right - width * 0.25f,
+                        mFrame.right - (width -pX) * 0.25f,
                         mFrame.top + mButtonHeight + 5 /*cover frame border of intersecting area*/);
 
                 mButtonFrame.top += SUBPIXEL;
@@ -542,8 +555,8 @@ public class BatteryMeterView extends View implements DemoMode {
                 c.drawPath(mBoltPath, mBoltPaint);
             } else if (level <= EMPTY) {
                 final float x = mHorizontal
-                        ? pt + (height * 0.5f)
-                        : mWidth * 0.5f;
+                        ? pt + (pX + (height - pX) * 0.5f)
+                        : pX + (mWidth - pX) * 0.5f;
                 final float y = mHorizontal
                         ? (mWidth - mWarningTextHeight) * -0.48f
                         : (mHeight + mWarningTextHeight) * 0.48f;
@@ -565,11 +578,18 @@ public class BatteryMeterView extends View implements DemoMode {
                 mTextHeight = -mTextPaint.getFontMetrics().ascent;
 
                 final String str = String.valueOf(SINGLE_DIGIT_PERCENT ? (level/10) : level);
-                final float x  = mWidth * 0.5f;
+                final float x  = pX + (mWidth - pX) * 0.5f;
                 final float y = pt + (height + mTextHeight) * 0.47f;
 
                 c.drawText(str, x, y, mTextPaint);
             }
+	}
+
+        @Override
+        public void onDraw(Canvas c, BatteryTracker tracker) {
+            if (mDisposed) return;
+
+            batteryDraw(c,tracker, 0);
         }
 
         @Override
@@ -604,6 +624,169 @@ public class BatteryMeterView extends View implements DemoMode {
                     ? R.array.batterymeter_inverted_bolt_points
                     : R.array.batterymeter_bolt_points;
         }
+
+	public boolean getDisposed() {
+	    return mDisposed;
+	}
+    }
+
+    protected class NormalTextBatteryMeterDrawable extends NormalBatteryMeterDrawable {
+
+	private static final boolean DRAW_LEVEL = false;
+
+        private float mTextX;
+        private float mTextY;
+
+        private boolean mOldPlugged = false;
+        private int mOldLevel = -1;
+
+        private boolean mIsAnimating;
+        private int mAnimOffset;
+
+        private Paint mBackPaint;
+        private Paint mFrontPaint;
+
+        public NormalTextBatteryMeterDrawable(Resources res, boolean horizontal) {
+            super(res, horizontal);
+            mIsAnimating = false;
+
+            DisplayMetrics dm = res.getDisplayMetrics();
+
+            mBackPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            mBackPaint.setTextAlign(Paint.Align.RIGHT);
+            mBackPaint.setColor(res.getColor(R.color.batterymeter_frame_color));
+            mBackPaint.setTextSize(16.0f * dm.density);
+
+            mFrontPaint = new Paint(mBackPaint);
+        }
+
+        @Override
+        public void onDraw(Canvas c, BatteryTracker tracker) {
+	    if (getDisposed()) return;
+
+            float onedp = mContext.getResources().getDisplayMetrics().density;	    
+	    Rect bounds = getBounds(tracker, tracker.level);
+	    int textWidth = (int)(bounds.width() + getPaddingStart() + getPaddingEnd() + onedp) + 6;
+
+	    // Draw icon first
+	    batteryDraw(c, tracker, textWidth);
+	    
+	    // Draw text
+            int level = tracker.level;
+            boolean plugged = tracker.plugged;
+            boolean unknownStatus = tracker.status == BatteryManager.BATTERY_STATUS_UNKNOWN;
+
+            if (mOldLevel != level || mOldPlugged != plugged) {
+                mOldLevel = level;
+                mOldPlugged = plugged;
+
+                postInvalidate();
+                requestLayout();
+                return;
+            }
+
+            if (unknownStatus) {
+                c.drawText("?", mTextX, mTextY, mBackPaint);
+                Resources res = mContext.getResources();
+                mFrontPaint.setColor(res.getColor(R.color.batterymeter_frame_color));
+                drawWithoutLevel(c, "?");
+                return;
+            }
+
+            mFrontPaint.setColor(getColorForLevel(level));
+
+            // Is plugged? Then use the animation status
+            if (tracker.shouldIndicateCharging() && level != 100) {
+                updateChargeAnimation(tracker);
+                drawWithLevel(c, tracker, mAnimOffset, getLevel(level));
+            } else {
+                resetChargeAnimation();
+                if (DRAW_LEVEL) {
+                    drawWithLevel(c, tracker, level, getLevel(level));
+                } else {
+                    drawWithoutLevel(c, getLevel(level));
+                }
+            }
+        }
+
+        private void drawWithLevel(Canvas c, BatteryTracker tracker, int level, String levelTxt) {
+            Rect bounds = getBounds(tracker, level);
+
+            // Draw the background
+            c.drawText(levelTxt, mTextX, mTextY, mBackPaint);
+
+            // Draw the foreground
+            c.save();
+            c.clipRect(0.0f, mTextY - ((level * bounds.height()) / 100.0f), mTextX, mTextY);
+            c.drawText(levelTxt, mTextX, mTextY, mFrontPaint);
+            c.restore();
+        }
+
+        private void drawWithoutLevel(Canvas c, String levelTxt) {
+            // We need to draw the overlay back paint to get the proper color
+            c.drawText(levelTxt, mTextX, mTextY, mBackPaint);
+            c.drawText(levelTxt, mTextX, mTextY, mFrontPaint);
+        }
+
+        @Override
+        public void onSizeChanged(int w, int h, int oldw, int oldh) {
+	    super.onSizeChanged(w, h, oldw, oldh);
+            BatteryTracker tracker = mDemoMode ? mDemoTracker : mTracker;
+            Rect bounds = getBounds(tracker, tracker.level);
+            float onedp = mContext.getResources().getDisplayMetrics().density * 0.5f;
+            float height = h - getPaddingBottom() - getPaddingTop();
+
+            mTextX = w - (mHorizontal ? 32 : 20);
+            mTextY = h - getPaddingBottom() - (height / 2 - bounds.height() /2) + onedp;
+        }
+
+        protected float calculateMeasureWidth() {
+            BatteryTracker tracker = mDemoMode ? mDemoTracker : mTracker;
+            Rect bounds = getBounds(tracker, tracker.level);
+            float onedp = mContext.getResources().getDisplayMetrics().density;
+            return bounds.width() + getPaddingStart() + getPaddingEnd() + onedp + 6;
+        }
+
+        private Rect getBounds(BatteryTracker tracker, int level) {
+            Rect bounds = new Rect();
+            boolean unknownStatus = tracker.status == BatteryManager.BATTERY_STATUS_UNKNOWN;
+            String levelTxt = getLevel(unknownStatus ? -1 : level);
+            mBackPaint.getTextBounds(levelTxt, 0, levelTxt.length(), bounds);
+            return bounds;
+        }
+
+        private String getLevel(int level) {
+            if (level == -1) {
+                return String.format("?", level);
+            }
+            return String.format("%s%%", level);
+        }
+
+        private void updateChargeAnimation(BatteryTracker tracker) {
+            if (!tracker.shouldIndicateCharging()) {
+                resetChargeAnimation();
+                return;
+            }
+
+            mIsAnimating = true;
+
+            if (mAnimOffset > 100) {
+                mAnimOffset = 0;
+            } else {
+                mAnimOffset += 5;
+            }
+
+            mHandler.removeCallbacks(mInvalidate);
+            mHandler.postDelayed(mInvalidate, 100);
+        }
+
+        private void resetChargeAnimation() {
+            if (mIsAnimating) {
+                mIsAnimating = false;
+                mAnimOffset = 0;
+                mHandler.removeCallbacks(mInvalidate);
+            }
+        }
     }
 
     protected class CircleBatteryMeterDrawable implements BatteryMeterDrawable {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java
index 50b3ea3..b8de97d 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java
@@ -122,8 +122,8 @@ public class BatteryBar extends ProgressBar implements Animatable, Runnable {
 
     private void updateSettings() {
         ContentResolver resolver = mContext.getContentResolver();
-        mShowBatteryBar = (Settings.System.getInt(resolver,
-                Settings.System.STATUS_BAR_BATTERY, 0) == 7);
+	int mSettingsShowBatteryBar = Settings.System.getInt(resolver, Settings.System.STATUS_BAR_BATTERY, 0);
+        mShowBatteryBar = ((mSettingsShowBatteryBar == 7) || (mSettingsShowBatteryBar == 8));
         if (mShowBatteryBar) {
             setVisibility(VISIBLE);
         } else {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index e7de0c9..6b1acb3 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -3131,6 +3131,18 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
                 mode = BatteryMeterMode.BATTERY_METER_GONE;
                 break;
 
+            case 8:
+                mode = BatteryMeterMode.BATTERY_METER_TEXT;
+                break;
+
+            case 9:
+                mode = BatteryMeterMode.BATTERY_METER_ICON_PORTRAIT_TEXT;
+                break;
+
+            case 10:
+                mode = BatteryMeterMode.BATTERY_METER_ICON_LANDSCAPE_TEXT;
+                break;
+
             default:
                 break;
         }
